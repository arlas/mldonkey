(** UDP trackers
  http://www.bittorrent.org/beps/bep_0015.html *)

open Bitstring
open BTTypes

let of_bits = string_of_bitstring
let bits = bitstring_of_string

exception Error of string

let fail fmt = Printf.ksprintf (fun s -> raise (Error s)) fmt

let bitmatch error_response = { 3l : 32 ; txn : 32 ; msg : -1 : string }

(** connect - obtain connection_id *)
let connect_request txn =
  of_bits ( BITSTRING { 0x41727101980L : 64 ; 0l : 32 ; txn : 32 } )

(** connect response with connection_id for future use *)
let connect_response s exp_txn =
  bitmatch bits s with
  | { 0l : 32; txn : 32 : check (txn = exp_txn); conn_id : 64 } -> conn_id
  | { :error_response } -> fail "error connect_response txn %ld : %s" txn msg
  | { _ }  -> fail "error connect_response (expected txn %ld) : %s" exp_txn (AnyEndian.dump_hex_s s)

(** announce *)
let announce_request conn txn ~info_hash ~peer_id (downloaded,left,uploaded) event ?(ip=0l) ?(key=0l) ~numwant port =
  of_bits (BITSTRING {
    conn : 64 ; (* The connection id acquired from establishing the connection. *)
    1l : 32 ; (* Action: connect = 0; announce = 1; scrape = 2; error = 3 (only in server replies) *)
    txn : 32 ; (* Randomized by client. *)
    info_hash : 20 * 8 : string; (* The info-hash of the torrent you want announce yourself in. *)
    peer_id : 20 * 8 : string; (* Your peer id. *)
    downloaded : 64 ; (* The number of byte you've downloaded in this session. *)
    left : 64 ; (* The number of bytes you have left to download until you're finished. *)
    uploaded : 64 ; (* The number of bytes you have uploaded in this session. *)
    event : 32 ; (* The event 0: none; 1: completed; 2: started; 3: stopped *)
    0l : 32 ; (* Your ip address. Set to 0 if you want the tracker to use the sender of this udp packet. *)
    key : 32 ; (* A unique key that is randomized by the client. *)
    numwant : 32 ; (* The maximum number of peers you want in the reply. Use -1 for default. *)
    port : 16 (* The port you're listening on. *) })
 (* uint16_t	extensions *)
 
(** announce response *)
(* size	name			description
int32_t	action			The action this is a reply to. Should in this case be 1 for announce. If 3 (for error) see errors. See actions.
int32_t	transaction_id	Must match the transaction_id sent in the announce request.
int32_t	interval		the number of seconds you should wait until reannouncing yourself.
int32_t	leechers		The number of peers in the swarm that has not finished downloading.
int32_t	seeders			The number of peers in the swarm that has finished downloading and are seeding.
The rest of the server reply is a variable number of the following structure:

size		name	description
int32_t		ip		The ip of a peer in the swarm.
uint16_t	port	The peer's listen port.
*)
let announce_response s exp_txn tracker_info =
  let rec clients rest l =
    bitmatch rest with
    | { ip : 32 ; port : 16 ; rest : -1 : bitstring } -> clients rest ((ip,port)::l)
    | { _ } -> l
  in
  bitmatch bits s with
  (* 1: announce response *)
  | { 1l : 32; txn : 32 : check (txn = exp_txn); interval : 32; leechers : 32; seeders : 32;
      rest : -1 : bitstring } ->
			tracker_info.tracker_torrent_complete <- Int32.to_int seeders;
			tracker_info.tracker_torrent_incomplete <- Int32.to_int leechers;
			(interval,clients rest [])
  | { :error_response } -> fail "error announce_response txn %ld : %s" txn msg
  | { _ } -> fail "error announce_response (expected txn %ld) : %s" exp_txn (AnyEndian.dump_hex_s s)
